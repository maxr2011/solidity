{"ast":null,"code":"import { is, makeIterator } from '../utils';\nvar done = {\n  done: true,\n  value: undefined\n};\nexport var qEnd = {};\nexport function safeName(patternOrChannel) {\n  if (is.channel(patternOrChannel)) {\n    return 'channel';\n  } else if (Array.isArray(patternOrChannel)) {\n    return String(patternOrChannel.map(function (entry) {\n      return String(entry);\n    }));\n  } else {\n    return String(patternOrChannel);\n  }\n}\nexport default function fsmIterator(fsm, q0) {\n  var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'iterator';\n  var updateState = void 0,\n      qNext = q0;\n\n  function next(arg, error) {\n    if (qNext === qEnd) {\n      return done;\n    }\n\n    if (error) {\n      qNext = qEnd;\n      throw error;\n    } else {\n      updateState && updateState(arg);\n\n      var _fsm$qNext = fsm[qNext](),\n          q = _fsm$qNext[0],\n          output = _fsm$qNext[1],\n          _updateState = _fsm$qNext[2];\n\n      qNext = q;\n      updateState = _updateState;\n      return qNext === qEnd ? done : output;\n    }\n  }\n\n  return makeIterator(next, function (error) {\n    return next(null, error);\n  }, name, true);\n}","map":{"version":3,"sources":["C:/Users/Blockchain FWPM/Desktop/N/solidity/src/eventManagerTruffle/client/node_modules/redux-saga/es/internal/sagaHelpers/fsmIterator.js"],"names":["is","makeIterator","done","value","undefined","qEnd","safeName","patternOrChannel","channel","Array","isArray","String","map","entry","fsmIterator","fsm","q0","name","arguments","length","updateState","qNext","next","arg","error","_fsm$qNext","q","output","_updateState"],"mappings":"AAAA,SAASA,EAAT,EAAaC,YAAb,QAAiC,UAAjC;AAEA,IAAIC,IAAI,GAAG;AAAEA,EAAAA,IAAI,EAAE,IAAR;AAAcC,EAAAA,KAAK,EAAEC;AAArB,CAAX;AACA,OAAO,IAAIC,IAAI,GAAG,EAAX;AAEP,OAAO,SAASC,QAAT,CAAkBC,gBAAlB,EAAoC;AACzC,MAAIP,EAAE,CAACQ,OAAH,CAAWD,gBAAX,CAAJ,EAAkC;AAChC,WAAO,SAAP;AACD,GAFD,MAEO,IAAIE,KAAK,CAACC,OAAN,CAAcH,gBAAd,CAAJ,EAAqC;AAC1C,WAAOI,MAAM,CAACJ,gBAAgB,CAACK,GAAjB,CAAqB,UAAUC,KAAV,EAAiB;AAClD,aAAOF,MAAM,CAACE,KAAD,CAAb;AACD,KAFa,CAAD,CAAb;AAGD,GAJM,MAIA;AACL,WAAOF,MAAM,CAACJ,gBAAD,CAAb;AACD;AACF;AAED,eAAe,SAASO,WAAT,CAAqBC,GAArB,EAA0BC,EAA1B,EAA8B;AAC3C,MAAIC,IAAI,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBd,SAAzC,GAAqDc,SAAS,CAAC,CAAD,CAA9D,GAAoE,UAA/E;AAEA,MAAIE,WAAW,GAAG,KAAK,CAAvB;AAAA,MACIC,KAAK,GAAGL,EADZ;;AAGA,WAASM,IAAT,CAAcC,GAAd,EAAmBC,KAAnB,EAA0B;AACxB,QAAIH,KAAK,KAAKhB,IAAd,EAAoB;AAClB,aAAOH,IAAP;AACD;;AAED,QAAIsB,KAAJ,EAAW;AACTH,MAAAA,KAAK,GAAGhB,IAAR;AACA,YAAMmB,KAAN;AACD,KAHD,MAGO;AACLJ,MAAAA,WAAW,IAAIA,WAAW,CAACG,GAAD,CAA1B;;AAEA,UAAIE,UAAU,GAAGV,GAAG,CAACM,KAAD,CAAH,EAAjB;AAAA,UACIK,CAAC,GAAGD,UAAU,CAAC,CAAD,CADlB;AAAA,UAEIE,MAAM,GAAGF,UAAU,CAAC,CAAD,CAFvB;AAAA,UAGIG,YAAY,GAAGH,UAAU,CAAC,CAAD,CAH7B;;AAKAJ,MAAAA,KAAK,GAAGK,CAAR;AACAN,MAAAA,WAAW,GAAGQ,YAAd;AACA,aAAOP,KAAK,KAAKhB,IAAV,GAAiBH,IAAjB,GAAwByB,MAA/B;AACD;AACF;;AAED,SAAO1B,YAAY,CAACqB,IAAD,EAAO,UAAUE,KAAV,EAAiB;AACzC,WAAOF,IAAI,CAAC,IAAD,EAAOE,KAAP,CAAX;AACD,GAFkB,EAEhBP,IAFgB,EAEV,IAFU,CAAnB;AAGD","sourcesContent":["import { is, makeIterator } from '../utils';\r\n\r\nvar done = { done: true, value: undefined };\r\nexport var qEnd = {};\r\n\r\nexport function safeName(patternOrChannel) {\r\n  if (is.channel(patternOrChannel)) {\r\n    return 'channel';\r\n  } else if (Array.isArray(patternOrChannel)) {\r\n    return String(patternOrChannel.map(function (entry) {\r\n      return String(entry);\r\n    }));\r\n  } else {\r\n    return String(patternOrChannel);\r\n  }\r\n}\r\n\r\nexport default function fsmIterator(fsm, q0) {\r\n  var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'iterator';\r\n\r\n  var updateState = void 0,\r\n      qNext = q0;\r\n\r\n  function next(arg, error) {\r\n    if (qNext === qEnd) {\r\n      return done;\r\n    }\r\n\r\n    if (error) {\r\n      qNext = qEnd;\r\n      throw error;\r\n    } else {\r\n      updateState && updateState(arg);\r\n\r\n      var _fsm$qNext = fsm[qNext](),\r\n          q = _fsm$qNext[0],\r\n          output = _fsm$qNext[1],\r\n          _updateState = _fsm$qNext[2];\r\n\r\n      qNext = q;\r\n      updateState = _updateState;\r\n      return qNext === qEnd ? done : output;\r\n    }\r\n  }\r\n\r\n  return makeIterator(next, function (error) {\r\n    return next(null, error);\r\n  }, name, true);\r\n}"]},"metadata":{},"sourceType":"module"}