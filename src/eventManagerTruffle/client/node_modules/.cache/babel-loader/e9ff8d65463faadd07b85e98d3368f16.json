{"ast":null,"code":"var f = require('../formatters');\n\nvar formatters = require('web3-core-helpers').formatters;\n\nvar SolidityType = require('../type');\n/**\r\n * SolidityTypeAddress is a protoype that represents address type\r\n * It matches:\r\n * address\r\n * address[]\r\n * address[4]\r\n * address[][]\r\n * address[3][]\r\n * address[][6][], ...\r\n */\n\n\nvar SolidityTypeAddress = function () {\n  this._inputFormatter = function () {\n    var args = Array.prototype.slice.call(arguments);\n    args[0] = !args[0] || args[0] === '0x0' ? '' : formatters.inputAddressFormatter(args[0]);\n    return f.formatInputInt.apply(this, args);\n  };\n\n  this._outputFormatter = f.formatOutputAddress;\n};\n\nSolidityTypeAddress.prototype = new SolidityType({});\nSolidityTypeAddress.prototype.constructor = SolidityTypeAddress;\n\nSolidityTypeAddress.prototype.isType = function (name) {\n  return !!name.match(/address(\\[([0-9]*)\\])?/);\n};\n\nmodule.exports = SolidityTypeAddress;","map":{"version":3,"sources":["C:/Users/Blockchain FWPM/Desktop/N/solidity/src/eventManagerTruffle/client/node_modules/drizzle/node_modules/web3-eth-abi/src/types/address.js"],"names":["f","require","formatters","SolidityType","SolidityTypeAddress","_inputFormatter","args","Array","prototype","slice","call","arguments","inputAddressFormatter","formatInputInt","apply","_outputFormatter","formatOutputAddress","constructor","isType","name","match","module","exports"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,eAAD,CAAf;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,mBAAD,CAAP,CAA6BC,UAA9C;;AACA,IAAIC,YAAY,GAAGF,OAAO,CAAC,SAAD,CAA1B;AAEA;;;;;;;;;;;;AAUA,IAAIG,mBAAmB,GAAG,YAAY;AAClC,OAAKC,eAAL,GAAuB,YAAU;AAC7B,QAAIC,IAAI,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,CAAX;AACAL,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAW,CAACA,IAAI,CAAC,CAAD,CAAL,IAAYA,IAAI,CAAC,CAAD,CAAJ,KAAY,KAAzB,GAAkC,EAAlC,GAAuCJ,UAAU,CAACU,qBAAX,CAAiCN,IAAI,CAAC,CAAD,CAArC,CAAjD;AACA,WAAON,CAAC,CAACa,cAAF,CAAiBC,KAAjB,CAAuB,IAAvB,EAA6BR,IAA7B,CAAP;AACH,GAJD;;AAKA,OAAKS,gBAAL,GAAwBf,CAAC,CAACgB,mBAA1B;AACH,CAPD;;AASAZ,mBAAmB,CAACI,SAApB,GAAgC,IAAIL,YAAJ,CAAiB,EAAjB,CAAhC;AACAC,mBAAmB,CAACI,SAApB,CAA8BS,WAA9B,GAA4Cb,mBAA5C;;AAEAA,mBAAmB,CAACI,SAApB,CAA8BU,MAA9B,GAAuC,UAAUC,IAAV,EAAgB;AACnD,SAAO,CAAC,CAACA,IAAI,CAACC,KAAL,CAAW,wBAAX,CAAT;AACH,CAFD;;AAIAC,MAAM,CAACC,OAAP,GAAiBlB,mBAAjB","sourcesContent":["var f = require('../formatters');\r\nvar formatters = require('web3-core-helpers').formatters;\r\nvar SolidityType = require('../type');\r\n\r\n/**\r\n * SolidityTypeAddress is a protoype that represents address type\r\n * It matches:\r\n * address\r\n * address[]\r\n * address[4]\r\n * address[][]\r\n * address[3][]\r\n * address[][6][], ...\r\n */\r\nvar SolidityTypeAddress = function () {\r\n    this._inputFormatter = function(){\r\n        var args = Array.prototype.slice.call(arguments);\r\n        args[0] = (!args[0] || args[0] === '0x0') ? '' : formatters.inputAddressFormatter(args[0]);\r\n        return f.formatInputInt.apply(this, args);\r\n    };\r\n    this._outputFormatter = f.formatOutputAddress;\r\n};\r\n\r\nSolidityTypeAddress.prototype = new SolidityType({});\r\nSolidityTypeAddress.prototype.constructor = SolidityTypeAddress;\r\n\r\nSolidityTypeAddress.prototype.isType = function (name) {\r\n    return !!name.match(/address(\\[([0-9]*)\\])?/);\r\n};\r\n\r\nmodule.exports = SolidityTypeAddress;\r\n"]},"metadata":{},"sourceType":"script"}