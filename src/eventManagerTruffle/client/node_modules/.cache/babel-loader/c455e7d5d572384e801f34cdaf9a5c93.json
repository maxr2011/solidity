{"ast":null,"code":"/*\r\n    This file is part of web3.js.\r\n\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\n\n/** @file index.js\r\n * @authors:\r\n *   Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2017\r\n */\n\"use strict\";\n\nvar _ = require('underscore');\n\nvar errors = require('web3-core-helpers').errors;\n\nvar oboe = require('oboe');\n\nvar IpcProvider = function IpcProvider(path, net) {\n  var _this = this;\n\n  this.responseCallbacks = {};\n  this.notificationCallbacks = [];\n  this.path = path;\n  this.connected = false;\n  this.connection = net.connect({\n    path: this.path\n  });\n  this.addDefaultEvents(); // LISTEN FOR CONNECTION RESPONSES\n\n  var callback = function (result) {\n    /*jshint maxcomplexity: 6 */\n    var id = null; // get the id which matches the returned id\n\n    if (_.isArray(result)) {\n      result.forEach(function (load) {\n        if (_this.responseCallbacks[load.id]) id = load.id;\n      });\n    } else {\n      id = result.id;\n    } // notification\n\n\n    if (!id && result.method.indexOf('_subscription') !== -1) {\n      _this.notificationCallbacks.forEach(function (callback) {\n        if (_.isFunction(callback)) callback(result);\n      }); // fire the callback\n\n    } else if (_this.responseCallbacks[id]) {\n      _this.responseCallbacks[id](null, result);\n\n      delete _this.responseCallbacks[id];\n    }\n  }; // use oboe.js for Sockets\n\n\n  if (net.constructor.name === 'Socket') {\n    oboe(this.connection).done(callback);\n  } else {\n    this.connection.on('data', function (data) {\n      _this._parseResponse(data.toString()).forEach(callback);\n    });\n  }\n};\n/**\r\nWill add the error and end event to timeout existing calls\r\n\r\n@method addDefaultEvents\r\n*/\n\n\nIpcProvider.prototype.addDefaultEvents = function () {\n  var _this = this;\n\n  this.connection.on('connect', function () {\n    _this.connected = true;\n  });\n  this.connection.on('close', function () {\n    _this.connected = false;\n  });\n  this.connection.on('error', function () {\n    _this._timeout();\n  });\n  this.connection.on('end', function () {\n    _this._timeout();\n  });\n  this.connection.on('timeout', function () {\n    _this._timeout();\n  });\n};\n/**\r\n Will parse the response and make an array out of it.\r\n\r\n NOTE, this exists for backwards compatibility reasons.\r\n\r\n @method _parseResponse\r\n @param {String} data\r\n */\n\n\nIpcProvider.prototype._parseResponse = function (data) {\n  var _this = this,\n      returnValues = []; // DE-CHUNKER\n\n\n  var dechunkedData = data.replace(/\\}[\\n\\r]?\\{/g, '}|--|{') // }{\n  .replace(/\\}\\][\\n\\r]?\\[\\{/g, '}]|--|[{') // }][{\n  .replace(/\\}[\\n\\r]?\\[\\{/g, '}|--|[{') // }[{\n  .replace(/\\}\\][\\n\\r]?\\{/g, '}]|--|{') // }]{\n  .split('|--|');\n  dechunkedData.forEach(function (data) {\n    // prepend the last chunk\n    if (_this.lastChunk) data = _this.lastChunk + data;\n    var result = null;\n\n    try {\n      result = JSON.parse(data);\n    } catch (e) {\n      _this.lastChunk = data; // start timeout to cancel all requests\n\n      clearTimeout(_this.lastChunkTimeout);\n      _this.lastChunkTimeout = setTimeout(function () {\n        _this._timeout();\n\n        throw errors.InvalidResponse(data);\n      }, 1000 * 15);\n      return;\n    } // cancel timeout and set chunk to null\n\n\n    clearTimeout(_this.lastChunkTimeout);\n    _this.lastChunk = null;\n    if (result) returnValues.push(result);\n  });\n  return returnValues;\n};\n/**\r\nGet the adds a callback to the responseCallbacks object,\r\nwhich will be called if a response matching the response Id will arrive.\r\n\r\n@method _addResponseCallback\r\n*/\n\n\nIpcProvider.prototype._addResponseCallback = function (payload, callback) {\n  var id = payload.id || payload[0].id;\n  var method = payload.method || payload[0].method;\n  this.responseCallbacks[id] = callback;\n  this.responseCallbacks[id].method = method;\n};\n/**\r\nTimeout all requests when the end/error event is fired\r\n\r\n@method _timeout\r\n*/\n\n\nIpcProvider.prototype._timeout = function () {\n  for (var key in this.responseCallbacks) {\n    if (this.responseCallbacks.hasOwnProperty(key)) {\n      this.responseCallbacks[key](errors.InvalidConnection('on IPC'));\n      delete this.responseCallbacks[key];\n    }\n  }\n};\n/**\r\n Try to reconnect\r\n\r\n @method reconnect\r\n */\n\n\nIpcProvider.prototype.reconnect = function () {\n  this.connection.connect({\n    path: this.path\n  });\n};\n\nIpcProvider.prototype.send = function (payload, callback) {\n  // try reconnect, when connection is gone\n  if (!this.connection.writable) this.connection.connect({\n    path: this.path\n  });\n  this.connection.write(JSON.stringify(payload));\n\n  this._addResponseCallback(payload, callback);\n};\n/**\r\nSubscribes to provider events.provider\r\n\r\n@method on\r\n@param {String} type    'notification', 'connect', 'error', 'end' or 'data'\r\n@param {Function} callback   the callback to call\r\n*/\n\n\nIpcProvider.prototype.on = function (type, callback) {\n  if (typeof callback !== 'function') throw new Error('The second parameter callback must be a function.');\n\n  switch (type) {\n    case 'data':\n      this.notificationCallbacks.push(callback);\n      break;\n    // adds error, end, timeout, connect\n\n    default:\n      this.connection.on(type, callback);\n      break;\n  }\n};\n/**\r\n Subscribes to provider events.provider\r\n\r\n @method on\r\n @param {String} type    'connect', 'error', 'end' or 'data'\r\n @param {Function} callback   the callback to call\r\n */\n\n\nIpcProvider.prototype.once = function (type, callback) {\n  if (typeof callback !== 'function') throw new Error('The second parameter callback must be a function.');\n  this.connection.once(type, callback);\n};\n/**\r\nRemoves event listener\r\n\r\n@method removeListener\r\n@param {String} type    'data', 'connect', 'error', 'end' or 'data'\r\n@param {Function} callback   the callback to call\r\n*/\n\n\nIpcProvider.prototype.removeListener = function (type, callback) {\n  var _this = this;\n\n  switch (type) {\n    case 'data':\n      this.notificationCallbacks.forEach(function (cb, index) {\n        if (cb === callback) _this.notificationCallbacks.splice(index, 1);\n      });\n      break;\n\n    default:\n      this.connection.removeListener(type, callback);\n      break;\n  }\n};\n/**\r\nRemoves all event listeners\r\n\r\n@method removeAllListeners\r\n@param {String} type    'data', 'connect', 'error', 'end' or 'data'\r\n*/\n\n\nIpcProvider.prototype.removeAllListeners = function (type) {\n  switch (type) {\n    case 'data':\n      this.notificationCallbacks = [];\n      break;\n\n    default:\n      this.connection.removeAllListeners(type);\n      break;\n  }\n};\n/**\r\nResets the providers, clears all callbacks\r\n\r\n@method reset\r\n*/\n\n\nIpcProvider.prototype.reset = function () {\n  this._timeout();\n\n  this.notificationCallbacks = [];\n  this.connection.removeAllListeners('error');\n  this.connection.removeAllListeners('end');\n  this.connection.removeAllListeners('timeout');\n  this.addDefaultEvents();\n};\n\nmodule.exports = IpcProvider;","map":{"version":3,"sources":["C:/Users/Blockchain FWPM/Desktop/N/solidity/src/eventManagerTruffle/client/node_modules/drizzle/node_modules/web3-providers-ipc/src/index.js"],"names":["_","require","errors","oboe","IpcProvider","path","net","_this","responseCallbacks","notificationCallbacks","connected","connection","connect","addDefaultEvents","callback","result","id","isArray","forEach","load","method","indexOf","isFunction","constructor","name","done","on","data","_parseResponse","toString","prototype","_timeout","returnValues","dechunkedData","replace","split","lastChunk","JSON","parse","e","clearTimeout","lastChunkTimeout","setTimeout","InvalidResponse","push","_addResponseCallback","payload","key","hasOwnProperty","InvalidConnection","reconnect","send","writable","write","stringify","type","Error","once","removeListener","cb","index","splice","removeAllListeners","reset","module","exports"],"mappings":"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","sourcesContent":["/*\r\n    This file is part of web3.js.\r\n\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/** @file index.js\r\n * @authors:\r\n *   Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2017\r\n */\r\n\r\n\"use strict\";\r\n\r\nvar _ = require('underscore');\r\nvar errors = require('web3-core-helpers').errors;\r\nvar oboe = require('oboe');\r\n\r\n\r\nvar IpcProvider = function IpcProvider(path, net) {\r\n    var _this = this;\r\n    this.responseCallbacks = {};\r\n    this.notificationCallbacks = [];\r\n    this.path = path;\r\n    this.connected = false;\r\n\r\n    this.connection = net.connect({path: this.path});\r\n\r\n    this.addDefaultEvents();\r\n\r\n    // LISTEN FOR CONNECTION RESPONSES\r\n    var callback = function(result) {\r\n        /*jshint maxcomplexity: 6 */\r\n\r\n        var id = null;\r\n\r\n        // get the id which matches the returned id\r\n        if(_.isArray(result)) {\r\n            result.forEach(function(load){\r\n                if(_this.responseCallbacks[load.id])\r\n                    id = load.id;\r\n            });\r\n        } else {\r\n            id = result.id;\r\n        }\r\n\r\n        // notification\r\n        if(!id && result.method.indexOf('_subscription') !== -1) {\r\n            _this.notificationCallbacks.forEach(function(callback){\r\n                if(_.isFunction(callback))\r\n                    callback(result);\r\n            });\r\n\r\n            // fire the callback\r\n        } else if(_this.responseCallbacks[id]) {\r\n            _this.responseCallbacks[id](null, result);\r\n            delete _this.responseCallbacks[id];\r\n        }\r\n    };\r\n\r\n    // use oboe.js for Sockets\r\n    if (net.constructor.name === 'Socket') {\r\n        oboe(this.connection)\r\n        .done(callback);\r\n    } else {\r\n        this.connection.on('data', function(data){\r\n            _this._parseResponse(data.toString()).forEach(callback);\r\n        });\r\n    }\r\n};\r\n\r\n/**\r\nWill add the error and end event to timeout existing calls\r\n\r\n@method addDefaultEvents\r\n*/\r\nIpcProvider.prototype.addDefaultEvents = function(){\r\n    var _this = this;\r\n\r\n    this.connection.on('connect', function(){\r\n        _this.connected = true;\r\n    });\r\n\r\n    this.connection.on('close', function(){\r\n        _this.connected = false;\r\n    });\r\n\r\n    this.connection.on('error', function(){\r\n        _this._timeout();\r\n    });\r\n\r\n    this.connection.on('end', function(){\r\n        _this._timeout();\r\n    });\r\n\r\n    this.connection.on('timeout', function(){\r\n        _this._timeout();\r\n    });\r\n};\r\n\r\n\r\n/**\r\n Will parse the response and make an array out of it.\r\n\r\n NOTE, this exists for backwards compatibility reasons.\r\n\r\n @method _parseResponse\r\n @param {String} data\r\n */\r\nIpcProvider.prototype._parseResponse = function(data) {\r\n    var _this = this,\r\n        returnValues = [];\r\n\r\n    // DE-CHUNKER\r\n    var dechunkedData = data\r\n        .replace(/\\}[\\n\\r]?\\{/g,'}|--|{') // }{\r\n        .replace(/\\}\\][\\n\\r]?\\[\\{/g,'}]|--|[{') // }][{\r\n        .replace(/\\}[\\n\\r]?\\[\\{/g,'}|--|[{') // }[{\r\n        .replace(/\\}\\][\\n\\r]?\\{/g,'}]|--|{') // }]{\r\n        .split('|--|');\r\n\r\n    dechunkedData.forEach(function(data){\r\n\r\n        // prepend the last chunk\r\n        if(_this.lastChunk)\r\n            data = _this.lastChunk + data;\r\n\r\n        var result = null;\r\n\r\n        try {\r\n            result = JSON.parse(data);\r\n\r\n        } catch(e) {\r\n\r\n            _this.lastChunk = data;\r\n\r\n            // start timeout to cancel all requests\r\n            clearTimeout(_this.lastChunkTimeout);\r\n            _this.lastChunkTimeout = setTimeout(function(){\r\n                _this._timeout();\r\n                throw errors.InvalidResponse(data);\r\n            }, 1000 * 15);\r\n\r\n            return;\r\n        }\r\n\r\n        // cancel timeout and set chunk to null\r\n        clearTimeout(_this.lastChunkTimeout);\r\n        _this.lastChunk = null;\r\n\r\n        if(result)\r\n            returnValues.push(result);\r\n    });\r\n\r\n    return returnValues;\r\n};\r\n\r\n\r\n/**\r\nGet the adds a callback to the responseCallbacks object,\r\nwhich will be called if a response matching the response Id will arrive.\r\n\r\n@method _addResponseCallback\r\n*/\r\nIpcProvider.prototype._addResponseCallback = function(payload, callback) {\r\n    var id = payload.id || payload[0].id;\r\n    var method = payload.method || payload[0].method;\r\n\r\n    this.responseCallbacks[id] = callback;\r\n    this.responseCallbacks[id].method = method;\r\n};\r\n\r\n/**\r\nTimeout all requests when the end/error event is fired\r\n\r\n@method _timeout\r\n*/\r\nIpcProvider.prototype._timeout = function() {\r\n    for(var key in this.responseCallbacks) {\r\n        if(this.responseCallbacks.hasOwnProperty(key)){\r\n            this.responseCallbacks[key](errors.InvalidConnection('on IPC'));\r\n            delete this.responseCallbacks[key];\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n Try to reconnect\r\n\r\n @method reconnect\r\n */\r\nIpcProvider.prototype.reconnect = function() {\r\n    this.connection.connect({path: this.path});\r\n};\r\n\r\n\r\nIpcProvider.prototype.send = function (payload, callback) {\r\n    // try reconnect, when connection is gone\r\n    if(!this.connection.writable)\r\n        this.connection.connect({path: this.path});\r\n\r\n\r\n    this.connection.write(JSON.stringify(payload));\r\n    this._addResponseCallback(payload, callback);\r\n};\r\n\r\n/**\r\nSubscribes to provider events.provider\r\n\r\n@method on\r\n@param {String} type    'notification', 'connect', 'error', 'end' or 'data'\r\n@param {Function} callback   the callback to call\r\n*/\r\nIpcProvider.prototype.on = function (type, callback) {\r\n\r\n    if(typeof callback !== 'function')\r\n        throw new Error('The second parameter callback must be a function.');\r\n\r\n    switch(type){\r\n        case 'data':\r\n            this.notificationCallbacks.push(callback);\r\n            break;\r\n\r\n        // adds error, end, timeout, connect\r\n        default:\r\n            this.connection.on(type, callback);\r\n            break;\r\n    }\r\n};\r\n\r\n/**\r\n Subscribes to provider events.provider\r\n\r\n @method on\r\n @param {String} type    'connect', 'error', 'end' or 'data'\r\n @param {Function} callback   the callback to call\r\n */\r\nIpcProvider.prototype.once = function (type, callback) {\r\n\r\n    if(typeof callback !== 'function')\r\n        throw new Error('The second parameter callback must be a function.');\r\n\r\n    this.connection.once(type, callback);\r\n};\r\n\r\n/**\r\nRemoves event listener\r\n\r\n@method removeListener\r\n@param {String} type    'data', 'connect', 'error', 'end' or 'data'\r\n@param {Function} callback   the callback to call\r\n*/\r\nIpcProvider.prototype.removeListener = function (type, callback) {\r\n    var _this = this;\r\n\r\n    switch(type){\r\n        case 'data':\r\n            this.notificationCallbacks.forEach(function(cb, index){\r\n                if(cb === callback)\r\n                    _this.notificationCallbacks.splice(index, 1);\r\n            });\r\n            break;\r\n\r\n        default:\r\n            this.connection.removeListener(type, callback);\r\n            break;\r\n    }\r\n};\r\n\r\n/**\r\nRemoves all event listeners\r\n\r\n@method removeAllListeners\r\n@param {String} type    'data', 'connect', 'error', 'end' or 'data'\r\n*/\r\nIpcProvider.prototype.removeAllListeners = function (type) {\r\n    switch(type){\r\n        case 'data':\r\n            this.notificationCallbacks = [];\r\n            break;\r\n\r\n        default:\r\n            this.connection.removeAllListeners(type);\r\n            break;\r\n    }\r\n};\r\n\r\n/**\r\nResets the providers, clears all callbacks\r\n\r\n@method reset\r\n*/\r\nIpcProvider.prototype.reset = function () {\r\n    this._timeout();\r\n    this.notificationCallbacks = [];\r\n\r\n    this.connection.removeAllListeners('error');\r\n    this.connection.removeAllListeners('end');\r\n    this.connection.removeAllListeners('timeout');\r\n\r\n    this.addDefaultEvents();\r\n};\r\n\r\nmodule.exports = IpcProvider;\r\n\r\n"]},"metadata":{},"sourceType":"script"}