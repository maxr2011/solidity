{"ast":null,"code":"import fsmIterator, { qEnd, safeName } from './fsmIterator';\nimport { cancel, take, fork } from '../io';\nimport { END } from '../channel';\nexport default function takeLatest(patternOrChannel, worker) {\n  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  var yTake = {\n    done: false,\n    value: take(patternOrChannel)\n  };\n\n  var yFork = function yFork(ac) {\n    return {\n      done: false,\n      value: fork.apply(undefined, [worker].concat(args, [ac]))\n    };\n  };\n\n  var yCancel = function yCancel(task) {\n    return {\n      done: false,\n      value: cancel(task)\n    };\n  };\n\n  var task = void 0,\n      action = void 0;\n\n  var setTask = function setTask(t) {\n    return task = t;\n  };\n\n  var setAction = function setAction(ac) {\n    return action = ac;\n  };\n\n  return fsmIterator({\n    q1: function q1() {\n      return ['q2', yTake, setAction];\n    },\n    q2: function q2() {\n      return action === END ? [qEnd] : task ? ['q3', yCancel(task)] : ['q1', yFork(action), setTask];\n    },\n    q3: function q3() {\n      return ['q1', yFork(action), setTask];\n    }\n  }, 'q1', 'takeLatest(' + safeName(patternOrChannel) + ', ' + worker.name + ')');\n}","map":{"version":3,"sources":["C:/Users/Blockchain FWPM/Desktop/N/solidity/src/eventManagerTruffle/client/node_modules/redux-saga/es/internal/sagaHelpers/takeLatest.js"],"names":["fsmIterator","qEnd","safeName","cancel","take","fork","END","takeLatest","patternOrChannel","worker","_len","arguments","length","args","Array","_key","yTake","done","value","yFork","ac","apply","undefined","concat","yCancel","task","action","setTask","t","setAction","q1","q2","q3","name"],"mappings":"AAAA,OAAOA,WAAP,IAAsBC,IAAtB,EAA4BC,QAA5B,QAA4C,eAA5C;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,IAAvB,QAAmC,OAAnC;AACA,SAASC,GAAT,QAAoB,YAApB;AAEA,eAAe,SAASC,UAAT,CAAoBC,gBAApB,EAAsCC,MAAtC,EAA8C;AAC3D,OAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAGC,KAAK,CAACJ,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAvB,CAAzC,EAAoEK,IAAI,GAAG,CAAhF,EAAmFA,IAAI,GAAGL,IAA1F,EAAgGK,IAAI,EAApG,EAAwG;AACtGF,IAAAA,IAAI,CAACE,IAAI,GAAG,CAAR,CAAJ,GAAiBJ,SAAS,CAACI,IAAD,CAA1B;AACD;;AAED,MAAIC,KAAK,GAAG;AAAEC,IAAAA,IAAI,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAEd,IAAI,CAACI,gBAAD;AAA1B,GAAZ;;AACA,MAAIW,KAAK,GAAG,SAASA,KAAT,CAAeC,EAAf,EAAmB;AAC7B,WAAO;AAAEH,MAAAA,IAAI,EAAE,KAAR;AAAeC,MAAAA,KAAK,EAAEb,IAAI,CAACgB,KAAL,CAAWC,SAAX,EAAsB,CAACb,MAAD,EAASc,MAAT,CAAgBV,IAAhB,EAAsB,CAACO,EAAD,CAAtB,CAAtB;AAAtB,KAAP;AACD,GAFD;;AAGA,MAAII,OAAO,GAAG,SAASA,OAAT,CAAiBC,IAAjB,EAAuB;AACnC,WAAO;AAAER,MAAAA,IAAI,EAAE,KAAR;AAAeC,MAAAA,KAAK,EAAEf,MAAM,CAACsB,IAAD;AAA5B,KAAP;AACD,GAFD;;AAIA,MAAIA,IAAI,GAAG,KAAK,CAAhB;AAAA,MACIC,MAAM,GAAG,KAAK,CADlB;;AAEA,MAAIC,OAAO,GAAG,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;AAChC,WAAOH,IAAI,GAAGG,CAAd;AACD,GAFD;;AAGA,MAAIC,SAAS,GAAG,SAASA,SAAT,CAAmBT,EAAnB,EAAuB;AACrC,WAAOM,MAAM,GAAGN,EAAhB;AACD,GAFD;;AAIA,SAAOpB,WAAW,CAAC;AACjB8B,IAAAA,EAAE,EAAE,SAASA,EAAT,GAAc;AAChB,aAAO,CAAC,IAAD,EAAOd,KAAP,EAAca,SAAd,CAAP;AACD,KAHgB;AAIjBE,IAAAA,EAAE,EAAE,SAASA,EAAT,GAAc;AAChB,aAAOL,MAAM,KAAKpB,GAAX,GAAiB,CAACL,IAAD,CAAjB,GAA0BwB,IAAI,GAAG,CAAC,IAAD,EAAOD,OAAO,CAACC,IAAD,CAAd,CAAH,GAA2B,CAAC,IAAD,EAAON,KAAK,CAACO,MAAD,CAAZ,EAAsBC,OAAtB,CAAhE;AACD,KANgB;AAOjBK,IAAAA,EAAE,EAAE,SAASA,EAAT,GAAc;AAChB,aAAO,CAAC,IAAD,EAAOb,KAAK,CAACO,MAAD,CAAZ,EAAsBC,OAAtB,CAAP;AACD;AATgB,GAAD,EAUf,IAVe,EAUT,gBAAgBzB,QAAQ,CAACM,gBAAD,CAAxB,GAA6C,IAA7C,GAAoDC,MAAM,CAACwB,IAA3D,GAAkE,GAVzD,CAAlB;AAWD","sourcesContent":["import fsmIterator, { qEnd, safeName } from './fsmIterator';\r\nimport { cancel, take, fork } from '../io';\r\nimport { END } from '../channel';\r\n\r\nexport default function takeLatest(patternOrChannel, worker) {\r\n  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\r\n    args[_key - 2] = arguments[_key];\r\n  }\r\n\r\n  var yTake = { done: false, value: take(patternOrChannel) };\r\n  var yFork = function yFork(ac) {\r\n    return { done: false, value: fork.apply(undefined, [worker].concat(args, [ac])) };\r\n  };\r\n  var yCancel = function yCancel(task) {\r\n    return { done: false, value: cancel(task) };\r\n  };\r\n\r\n  var task = void 0,\r\n      action = void 0;\r\n  var setTask = function setTask(t) {\r\n    return task = t;\r\n  };\r\n  var setAction = function setAction(ac) {\r\n    return action = ac;\r\n  };\r\n\r\n  return fsmIterator({\r\n    q1: function q1() {\r\n      return ['q2', yTake, setAction];\r\n    },\r\n    q2: function q2() {\r\n      return action === END ? [qEnd] : task ? ['q3', yCancel(task)] : ['q1', yFork(action), setTask];\r\n    },\r\n    q3: function q3() {\r\n      return ['q1', yFork(action), setTask];\r\n    }\r\n  }, 'q1', 'takeLatest(' + safeName(patternOrChannel) + ', ' + worker.name + ')');\r\n}"]},"metadata":{},"sourceType":"module"}