{"ast":null,"code":"/*\r\n    This file is part of web3.js.\r\n\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\n\n/**\r\n * @file index.js\r\n * @author Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2017\r\n */\n\"use strict\";\n\nvar _ = require('underscore');\n\nvar errors = require('web3-core-helpers').errors;\n\nvar Jsonrpc = require('./jsonrpc.js');\n\nvar BatchManager = require('./batch.js');\n\nvar givenProvider = require('./givenProvider.js');\n/**\r\n* It's responsible for passing messages to providers\r\n* It's also responsible for polling the ethereum node for incoming messages\r\n* Default poll timeout is 1 second\r\n* Singleton\r\n*/\n\n\nvar RequestManager = function RequestManager(provider) {\n  this.provider = null;\n  this.providers = RequestManager.providers;\n  this.setProvider(provider);\n  this.subscriptions = {};\n};\n\nRequestManager.givenProvider = givenProvider;\nRequestManager.providers = {\n  WebsocketProvider: require('web3-providers-ws'),\n  HttpProvider: require('web3-providers-http'),\n  IpcProvider: require('web3-providers-ipc')\n};\n/**\r\n * Should be used to set provider of request manager\r\n *\r\n * @method setProvider\r\n * @param {Object} p\r\n */\n\nRequestManager.prototype.setProvider = function (p, net) {\n  var _this = this; // autodetect provider\n\n\n  if (p && typeof p === 'string' && this.providers) {\n    // HTTP\n    if (/^http(s)?:\\/\\//i.test(p)) {\n      p = new this.providers.HttpProvider(p); // WS\n    } else if (/^ws(s)?:\\/\\//i.test(p)) {\n      p = new this.providers.WebsocketProvider(p); // IPC\n    } else if (p && typeof net === 'object' && typeof net.connect === 'function') {\n      p = new this.providers.IpcProvider(p, net);\n    } else if (p) {\n      throw new Error('Can\\'t autodetect provider for \"' + p + '\"');\n    }\n  } // reset the old one before changing, if still connected\n\n\n  if (this.provider && this.provider.connected) this.clearSubscriptions();\n  this.provider = p || null; // listen to incoming notifications\n\n  if (this.provider && this.provider.on) {\n    this.provider.on('data', function requestManagerNotification(result, deprecatedResult) {\n      result = result || deprecatedResult; // this is for possible old providers, which may had the error first handler\n      // check for result.method, to prevent old providers errors to pass as result\n\n      if (result.method && _this.subscriptions[result.params.subscription] && _this.subscriptions[result.params.subscription].callback) {\n        _this.subscriptions[result.params.subscription].callback(null, result.params.result);\n      }\n    }); // TODO add error, end, timeout, connect??\n    // this.provider.on('error', function requestManagerNotification(result){\n    //     Object.keys(_this.subscriptions).forEach(function(id){\n    //         if(_this.subscriptions[id].callback)\n    //             _this.subscriptions[id].callback(err);\n    //     });\n    // }\n  }\n};\n/**\r\n * Should be used to asynchronously send request\r\n *\r\n * @method sendAsync\r\n * @param {Object} data\r\n * @param {Function} callback\r\n */\n\n\nRequestManager.prototype.send = function (data, callback) {\n  callback = callback || function () {};\n\n  if (!this.provider) {\n    return callback(errors.InvalidProvider());\n  }\n\n  var payload = Jsonrpc.toPayload(data.method, data.params);\n  this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, result) {\n    if (result && result.id && payload.id !== result.id) return callback(new Error('Wrong response id \"' + result.id + '\" (expected: \"' + payload.id + '\") in ' + JSON.stringify(payload)));\n\n    if (err) {\n      return callback(err);\n    }\n\n    if (result && result.error) {\n      return callback(errors.ErrorResponse(result));\n    }\n\n    if (!Jsonrpc.isValidResponse(result)) {\n      return callback(errors.InvalidResponse(result));\n    }\n\n    callback(null, result.result);\n  });\n};\n/**\r\n * Should be called to asynchronously send batch request\r\n *\r\n * @method sendBatch\r\n * @param {Array} batch data\r\n * @param {Function} callback\r\n */\n\n\nRequestManager.prototype.sendBatch = function (data, callback) {\n  if (!this.provider) {\n    return callback(errors.InvalidProvider());\n  }\n\n  var payload = Jsonrpc.toBatchPayload(data);\n  this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, results) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (!_.isArray(results)) {\n      return callback(errors.InvalidResponse(results));\n    }\n\n    callback(null, results);\n  });\n};\n/**\r\n * Waits for notifications\r\n *\r\n * @method addSubscription\r\n * @param {String} id           the subscription id\r\n * @param {String} name         the subscription name\r\n * @param {String} type         the subscription namespace (eth, personal, etc)\r\n * @param {Function} callback   the callback to call for incoming notifications\r\n */\n\n\nRequestManager.prototype.addSubscription = function (id, name, type, callback) {\n  if (this.provider.on) {\n    this.subscriptions[id] = {\n      callback: callback,\n      type: type,\n      name: name\n    };\n  } else {\n    throw new Error('The provider doesn\\'t support subscriptions: ' + this.provider.constructor.name);\n  }\n};\n/**\r\n * Waits for notifications\r\n *\r\n * @method removeSubscription\r\n * @param {String} id           the subscription id\r\n * @param {Function} callback   fired once the subscription is removed\r\n */\n\n\nRequestManager.prototype.removeSubscription = function (id, callback) {\n  var _this = this;\n\n  if (this.subscriptions[id]) {\n    this.send({\n      method: this.subscriptions[id].type + '_unsubscribe',\n      params: [id]\n    }, callback); // remove subscription\n\n    delete _this.subscriptions[id];\n  }\n};\n/**\r\n * Should be called to reset the subscriptions\r\n *\r\n * @method reset\r\n */\n\n\nRequestManager.prototype.clearSubscriptions = function (keepIsSyncing) {\n  var _this = this; // uninstall all subscriptions\n\n\n  Object.keys(this.subscriptions).forEach(function (id) {\n    if (!keepIsSyncing || _this.subscriptions[id].name !== 'syncing') _this.removeSubscription(id);\n  }); //  reset notification callbacks etc.\n\n  if (this.provider.reset) this.provider.reset();\n};\n\nmodule.exports = {\n  Manager: RequestManager,\n  BatchManager: BatchManager\n};","map":{"version":3,"sources":["C:/Users/Blockchain FWPM/Desktop/N/solidity/src/eventManagerTruffle/client/node_modules/drizzle/node_modules/web3-core-requestmanager/src/index.js"],"names":["_","require","errors","Jsonrpc","BatchManager","givenProvider","RequestManager","provider","providers","setProvider","subscriptions","WebsocketProvider","HttpProvider","IpcProvider","prototype","p","net","_this","test","connect","Error","connected","clearSubscriptions","on","requestManagerNotification","result","deprecatedResult","method","params","subscription","callback","send","data","InvalidProvider","payload","toPayload","sendAsync","err","id","JSON","stringify","error","ErrorResponse","isValidResponse","InvalidResponse","sendBatch","toBatchPayload","results","isArray","addSubscription","name","type","constructor","removeSubscription","keepIsSyncing","Object","keys","forEach","reset","module","exports","Manager"],"mappings":"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","sourcesContent":["/*\r\n    This file is part of web3.js.\r\n\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/**\r\n * @file index.js\r\n * @author Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2017\r\n */\r\n\r\n\"use strict\";\r\n\r\n\r\nvar _ = require('underscore');\r\nvar errors = require('web3-core-helpers').errors;\r\nvar Jsonrpc = require('./jsonrpc.js');\r\nvar BatchManager = require('./batch.js');\r\nvar givenProvider = require('./givenProvider.js');\r\n\r\n\r\n\r\n    /**\r\n * It's responsible for passing messages to providers\r\n * It's also responsible for polling the ethereum node for incoming messages\r\n * Default poll timeout is 1 second\r\n * Singleton\r\n */\r\nvar RequestManager = function RequestManager(provider) {\r\n    this.provider = null;\r\n    this.providers = RequestManager.providers;\r\n\r\n    this.setProvider(provider);\r\n    this.subscriptions = {};\r\n};\r\n\r\n\r\n\r\nRequestManager.givenProvider = givenProvider;\r\n\r\nRequestManager.providers = {\r\n    WebsocketProvider: require('web3-providers-ws'),\r\n    HttpProvider: require('web3-providers-http'),\r\n    IpcProvider: require('web3-providers-ipc')\r\n};\r\n\r\n\r\n\r\n/**\r\n * Should be used to set provider of request manager\r\n *\r\n * @method setProvider\r\n * @param {Object} p\r\n */\r\nRequestManager.prototype.setProvider = function (p, net) {\r\n    var _this = this;\r\n\r\n    // autodetect provider\r\n    if(p && typeof p === 'string' && this.providers) {\r\n\r\n        // HTTP\r\n        if(/^http(s)?:\\/\\//i.test(p)) {\r\n            p = new this.providers.HttpProvider(p);\r\n\r\n            // WS\r\n        } else if(/^ws(s)?:\\/\\//i.test(p)) {\r\n            p = new this.providers.WebsocketProvider(p);\r\n\r\n            // IPC\r\n        } else if(p && typeof net === 'object'  && typeof net.connect === 'function') {\r\n            p = new this.providers.IpcProvider(p, net);\r\n\r\n        } else if(p) {\r\n            throw new Error('Can\\'t autodetect provider for \"'+ p +'\"');\r\n        }\r\n    }\r\n\r\n    // reset the old one before changing, if still connected\r\n    if(this.provider && this.provider.connected)\r\n        this.clearSubscriptions();\r\n\r\n\r\n    this.provider = p || null;\r\n\r\n    // listen to incoming notifications\r\n    if(this.provider && this.provider.on) {\r\n        this.provider.on('data', function requestManagerNotification(result, deprecatedResult){\r\n            result = result || deprecatedResult; // this is for possible old providers, which may had the error first handler\r\n\r\n            // check for result.method, to prevent old providers errors to pass as result\r\n            if(result.method && _this.subscriptions[result.params.subscription] && _this.subscriptions[result.params.subscription].callback) {\r\n                _this.subscriptions[result.params.subscription].callback(null, result.params.result);\r\n            }\r\n        });\r\n        // TODO add error, end, timeout, connect??\r\n        // this.provider.on('error', function requestManagerNotification(result){\r\n        //     Object.keys(_this.subscriptions).forEach(function(id){\r\n        //         if(_this.subscriptions[id].callback)\r\n        //             _this.subscriptions[id].callback(err);\r\n        //     });\r\n        // }\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Should be used to asynchronously send request\r\n *\r\n * @method sendAsync\r\n * @param {Object} data\r\n * @param {Function} callback\r\n */\r\nRequestManager.prototype.send = function (data, callback) {\r\n    callback = callback || function(){};\r\n\r\n    if (!this.provider) {\r\n        return callback(errors.InvalidProvider());\r\n    }\r\n\r\n    var payload = Jsonrpc.toPayload(data.method, data.params);\r\n    this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, result) {\r\n        if(result && result.id && payload.id !== result.id) return callback(new Error('Wrong response id \"'+ result.id +'\" (expected: \"'+ payload.id +'\") in '+ JSON.stringify(payload)));\r\n\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n\r\n        if (result && result.error) {\r\n            return callback(errors.ErrorResponse(result));\r\n        }\r\n\r\n        if (!Jsonrpc.isValidResponse(result)) {\r\n            return callback(errors.InvalidResponse(result));\r\n        }\r\n\r\n        callback(null, result.result);\r\n    });\r\n};\r\n\r\n/**\r\n * Should be called to asynchronously send batch request\r\n *\r\n * @method sendBatch\r\n * @param {Array} batch data\r\n * @param {Function} callback\r\n */\r\nRequestManager.prototype.sendBatch = function (data, callback) {\r\n    if (!this.provider) {\r\n        return callback(errors.InvalidProvider());\r\n    }\r\n\r\n    var payload = Jsonrpc.toBatchPayload(data);\r\n    this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, results) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n\r\n        if (!_.isArray(results)) {\r\n            return callback(errors.InvalidResponse(results));\r\n        }\r\n\r\n        callback(null, results);\r\n    });\r\n};\r\n\r\n\r\n/**\r\n * Waits for notifications\r\n *\r\n * @method addSubscription\r\n * @param {String} id           the subscription id\r\n * @param {String} name         the subscription name\r\n * @param {String} type         the subscription namespace (eth, personal, etc)\r\n * @param {Function} callback   the callback to call for incoming notifications\r\n */\r\nRequestManager.prototype.addSubscription = function (id, name, type, callback) {\r\n    if(this.provider.on) {\r\n        this.subscriptions[id] = {\r\n            callback: callback,\r\n            type: type,\r\n            name: name\r\n        };\r\n\r\n    } else {\r\n        throw new Error('The provider doesn\\'t support subscriptions: '+ this.provider.constructor.name);\r\n    }\r\n};\r\n\r\n/**\r\n * Waits for notifications\r\n *\r\n * @method removeSubscription\r\n * @param {String} id           the subscription id\r\n * @param {Function} callback   fired once the subscription is removed\r\n */\r\nRequestManager.prototype.removeSubscription = function (id, callback) {\r\n    var _this = this;\r\n\r\n    if(this.subscriptions[id]) {\r\n\r\n        this.send({\r\n            method: this.subscriptions[id].type + '_unsubscribe',\r\n            params: [id]\r\n        }, callback);\r\n\r\n        // remove subscription\r\n        delete _this.subscriptions[id];\r\n    }\r\n};\r\n\r\n/**\r\n * Should be called to reset the subscriptions\r\n *\r\n * @method reset\r\n */\r\nRequestManager.prototype.clearSubscriptions = function (keepIsSyncing) {\r\n    var _this = this;\r\n\r\n\r\n    // uninstall all subscriptions\r\n    Object.keys(this.subscriptions).forEach(function(id){\r\n        if(!keepIsSyncing || _this.subscriptions[id].name !== 'syncing')\r\n            _this.removeSubscription(id);\r\n    });\r\n\r\n\r\n    //  reset notification callbacks etc.\r\n    if(this.provider.reset)\r\n        this.provider.reset();\r\n};\r\n\r\nmodule.exports = {\r\n    Manager: RequestManager,\r\n    BatchManager: BatchManager\r\n};\r\n"]},"metadata":{},"sourceType":"script"}