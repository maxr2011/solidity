pragma solidity^0.6.7;import"../minified/Storage/Set.sol"as SetStorage;import"../minified/Storage/EventSet.sol"as EventStorage;import"../minified/Event.sol"as EventContract;contract EventManager{SetStorage.Set private user_storage;SetStorage.Set private event_address_storage;EventStorage.EventSet private event_storage;address payable private admin;constructor()public {user_storage=new SetStorage.Set();event_address_storage=new SetStorage.Set();event_storage=new EventStorage.EventSet();admin=0xad67a760e4Cb77e19F1B7B79d6B4901B5360DEF1;} modifier onlyAdmin{require(msg.sender==admin,"Access denied");_;} modifier onlyUser{require(user_storage.inArray(msg.sender),"Access is only allowed for registered users");_;} function login()public view returns(bool is_user) {return user_storage.inArray(msg.sender);} function register()public returns(uint user_id) {address payable user_address=msg.sender;require(!user_storage.inArray(user_address),"User already registered");user_storage.addToArray(user_address);return user_storage.getPosition(user_address);} function getUserCount()public view onlyAdmin returns(uint256 user_count) {return user_storage.getElementCount();} function getUserById(uint256 id)public view onlyAdmin returns(address payable user_address) {return payable(user_storage.getByPosition(id));} function createUserEvent(string memory event_name,string memory event_location,uint256 event_start_time,uint256 event_end_time)public onlyUser returns(address new_event_address) {EventContract.Event new_event=new EventContract.Event(msg.sender,event_name,event_location,event_start_time,event_end_time);event_storage.addToArray(new_event);event_address_storage.addToArray(address(new_event));return address(new_event);} function getEventCount()public view onlyAdmin returns(uint256 event_count) {return event_storage.getElementCount();} function getEventById(uint event_id)public view onlyAdmin returns(EventContract.Event event_element) {return event_storage.getByPosition(event_id);} function getEventPosition(EventContract.Event event_address)public view onlyUser returns(uint event_position) {return event_storage.getPosition(event_address);} function getEventInfo(EventContract.Event event_address)public view onlyUser returns(address event_id,address event_initiator,string memory event_name,string memory event_location,uint256 event_start_time,uint256 event_end_time,uint256 event_created_time,SetStorage.Set event_participants){return event_address.getInfo();} function getAllEvents()public view onlyAdmin returns(EventContract.Event[]memory all_events) {return event_storage.getEventArray();} function getUserEvents()public view onlyUser returns(EventContract.Event[]memory user_events) {return event_storage.getUserEventArray(msg.sender,false);} function getUserParticipantEvents()public view onlyUser returns(EventContract.Event[]memory user_participant_events) {return event_storage.getUserEventArray(msg.sender,true);} function participateEventById(EventContract.Event event_address)public onlyUser {event_address.participate(msg.sender);} function createUserEventItem(EventContract.Event event_address,string memory event_item_name)public onlyUser {event_address.proposeItemToBringWith(msg.sender,event_item_name);} function getEventItemInfo(EventContract.Event event_address,uint event_item_id)public view onlyUser returns(uint256 item_id,address payable item_holder,string memory item_name,uint256 item_time_expiration,bool item_checked) {return event_address.getItemInfo(event_item_id);} function removeEventItem(EventContract.Event event_address,uint event_item_id)public onlyUser {event_address.deletePartyItem(msg.sender,event_item_id);}}

