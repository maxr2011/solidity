pragma solidity^0.6.7;contract Set{mapping(address=>uint)index;address[]store;constructor()public{store.push(address(0));} function addToArray(address element)public {require(element!=address(0),"Invalid address");require(!inArray(element),"Address already in Array");index[element]=store.length;store.push(element);} function inArray(address element)public view returns(bool in_array) {return(index[element]>0);} function getPosition(address element)public view returns(uint address_position) {if(element==address(0))return 0;return index[element];} function getByPosition(uint pos)public view returns(address result_address) {require(pos>0,"this index is not valid");require(pos<store.length,"out of bounds");return store[pos];} function getElementCount()public view returns(uint element_count) {return store.length-1;} function getArray()public view returns(address[]memory set_array) {set_array=new address[](store.length-1);for(uint i=0;i<store.length-1;i++){set_array[i]=store[i+1];} return set_array;} function removeFromArray(address element)public {require(inArray(element),"Address not in Array");uint pos=getPosition(element);for(uint i=pos;i<store.length-1;i++){index[store[i+1]]=index[store[i]];store[i]=store[i+1];} delete index[element];store.pop();}}

